export interface DOMAPI {
  createElement: (tagName: any) => HTMLElement
  createElementNS: (namespaceURI: string, qualifiedName: string) => Element
  createTextNode: (text: string) => Text
  createComment: (text: string) => Comment
  insertBefore: (parentNode: Node, newNode: Node, referenceNode: Node | null) => void
  removeChild: (node: Node, child: Node) => void
  appendChild: (node: Node, child: Node) => void
  parentNode: (node: Node) => Node | null
  nextSibling: (node: Node) => Node | null
  tagName: (elm: Element) => string
  setTextContent: (node: Node, text: string | null) => void
  getTextContent: (node: Node) => string | null
  isElement: (node: Node) => node is Element
  isText: (node: Node) => node is Text
  isComment: (node: Node) => node is Comment
}

// 创建一个 tagName 的元素节点
function createElement (tagName: any): HTMLElement {
  return document.createElement(tagName)
}

// 创建一个具有指定的命名空间URI和限定名称的元素
function createElementNS (namespaceURI: string, qualifiedName: string): Element {
  return document.createElementNS(namespaceURI, qualifiedName)
}

// 创建一个文本节点 内容是 text
function createTextNode (text: string): Text {
  return document.createTextNode(text)
}

// createComment 用来创建一个注释节点
function createComment (text: string): Comment {
  return document.createComment(text)
}

// 在 parent 元素中的子元素 referenceNode 之前 插入 newNode 元素节点
function insertBefore (parentNode: Node, newNode: Node, referenceNode: Node | null): void {
  parentNode.insertBefore(newNode, referenceNode)
}

// 删除 node 父元素的子节点 child
function removeChild (node: Node, child: Node): void {
  node.removeChild(child)
}

// 将 child 元素加到 node 内容末尾
function appendChild (node: Node, child: Node): void {
  node.appendChild(child)
}

// 返回 node 节点的父节点
function parentNode (node: Node): Node | null {
  return node.parentNode
}

// 获取 next 兄弟节点
function nextSibling (node: Node): Node | null {
  return node.nextSibling
}

// 获取元素的 tagName
function tagName (elm: Element): string {
  return elm.tagName
}

// 将 text 设置为 node 节点的 textContent 内容
function setTextContent (node: Node, text: string | null): void {
  node.textContent = text
}

// node 节点的 textContent 内容
function getTextContent (node: Node): string | null {
  return node.textContent
}

// 判断 node 是否是元素 , 元素 === 1, text 节点 === 3 , document === 9 
function isElement (node: Node): node is Element {
  return node.nodeType === 1
}

// 判断 node 是否是 text 节点 , 元素 === 1, 节点 === 3 , document === 9 
function isText (node: Node): node is Text {
  return node.nodeType === 3
}

// 判断 node 是否是 一个 Comment 节点。 Comment.nodeType === 8
function isComment (node: Node): node is Comment {
  return node.nodeType === 8
}



// 对于 元素 节点 注解 的操作方法
export const htmlDomApi: DOMAPI = {
  createElement,
  createElementNS,
  createTextNode,
  createComment,
  insertBefore,
  removeChild,
  appendChild,
  parentNode,
  nextSibling,
  tagName,
  setTextContent,
  getTextContent,
  isElement,
  isText,
  isComment,
}
