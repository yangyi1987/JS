import { VNode, VNodeData } from '../vnode'
import { Module } from './module'

export type Attrs = Record<string, string | number | boolean>

const xlinkNS = 'http://www.w3.org/1999/xlink'
const xmlNS = 'http://www.w3.org/XML/1998/namespace'
const colonChar = 58
const xChar = 120

//  用于设置 DOM 元素的属性, 使用的是setAttribute() 方法
 
// elm 是虚拟 DOM 的元素节点 sel 是虚拟 DOM HTML 标签类型和 class 及 id 的 name, sel 就是一个字符串, 
// elm 是 text 时, sel 值是 undenfined
// text属性为 elm 元素的 文本内容



// 更新节点的 Attribute(属性)
function updateAttrs (oldVnode: VNode, vnode: VNode): void {
  var key: string
  // 获取新 DOM 的 elm 节点, #text 就是 undefined, 否则是一个元素
  var elm: Element = vnode.elm as Element
  // 获取旧的  DOM 中的 Attribute(属性)
  var oldAttrs = (oldVnode.data as VNodeData).attrs
  // 获取新 DOM 中的 Attribute(属性)
  var attrs = (vnode.data as VNodeData).attrs

  // 旧 DOM 没有 Attribute (属性) 并且 新的 DOM 中没有 Attribute(属性) 就直接结束, 不更新
  if (!oldAttrs && !attrs) return 
  // 旧 DOM 中的 Attribute (属性) 和 新的 DOM 的 Attribute(属性) 相同就直接结束, 不更新
  if (oldAttrs === attrs) return


  oldAttrs = oldAttrs || {}
  attrs = attrs || {}


  // 遍历新的 DOM 中的 Attribbute 属性与旧的 DOM 中的 Attribbute 属性进行对比
  // update modified attributes, add new attributes
  for (key in attrs) {
    const cur = attrs[key]
    const old = oldAttrs[key]
    // 判断新旧元素中的属性是否相同, 不相同时,判断新 DOM 中的 attribute 属性的 value是否存在,存在就保存该属性, 不存在删除该属性
    if (old !== cur) {
      if (cur === true) {
        elm.setAttribute(key, '')
      } else if (cur === false) {
        elm.removeAttribute(key)
      } else {
        if (key.charCodeAt(0) !== xChar) {
          elm.setAttribute(key, cur as any)
        } else if (key.charCodeAt(3) === colonChar) {
          // Assume xml namespace
          elm.setAttributeNS(xmlNS, key, cur as any)
        } else if (key.charCodeAt(5) === colonChar) {
          // Assume xlink namespace
          elm.setAttributeNS(xlinkNS, key, cur as any)
        } else {
          elm.setAttribute(key, cur as any)
        }
      }
    }
  }
  // remove removed attributes
  // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
  // the other option is to remove all attributes with value == undefined
  // 判断旧 dom 中的 属性是否存在新的 dom Attributes 中,不存在就删除属性 
  for (key in oldAttrs) {
    if (!(key in attrs)) {
      elm.removeAttribute(key)
    }
  }
}

export const attributesModule: Module = { create: updateAttrs, update: updateAttrs }
