import { VNode, VNodeData } from '../vnode'
import { Module } from './module'

export type Classes = Record<string, boolean>


// 用于切换 class 类样式的

function updateClass (oldVnode: VNode, vnode: VNode): void {
  var cur: any
  var name: string
  // 获取获取新的 DOM 节点元素,用于操作
  var elm: Element = vnode.elm as Element

  // 获取新旧 DOM 中的 class
  var oldClass = (oldVnode.data as VNodeData).class
  var klass = (vnode.data as VNodeData).class

  // 新旧 DOM 的 class 相同, 或都为 undefined 的时候就 直接结束。
  if (!oldClass && !klass) return
  if (oldClass === klass) return

  oldClass = oldClass || {}
  klass = klass || {}

  // 
  for (name in oldClass) {
    // 如果旧 dom 中的 class 中的 class 属性存在并且不等于 undefined时 
    // 通过 Object.prototype.hasOwnProperty.call 判断新 dom 的class 属性中是否存在, 不存在就删除该 class 属性
    if (
      oldClass[name] &&
      !Object.prototype.hasOwnProperty.call(klass, name)
    ) {
      // was `true` and now not provided
      // 删除 class
      elm.classList.remove(name)
    }
  }
  for (name in klass) {
    cur = klass[name]
    if (cur !== oldClass[name]) {
      (elm.classList as any)[cur ? 'add' : 'remove'](name)
    }
  }
}

export const classModule: Module = { create: updateClass, update: updateClass }
