{"id":"node_modules/snabbdom/src/package/modules/class.ts","dependencies":[{"name":"/Users/yangyi/yangyi/dome-vue/snabbdom-dome/package.json","includedInParent":true,"mtime":1602344467201},{"name":"/Users/yangyi/yangyi/dome-vue/snabbdom-dome/node_modules/snabbdom/package.json","includedInParent":true,"mtime":1602351382044}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.classModule = void 0;\n// 用于切换 class 类样式的\nfunction updateClass(oldVnode, vnode) {\n    var cur;\n    var name;\n    // 获取获取新的 DOM 节点元素,用于操作\n    var elm = vnode.elm;\n    // 获取新旧 DOM 中的 class\n    var oldClass = oldVnode.data.class;\n    var klass = vnode.data.class;\n    // 新旧 DOM 的 class 相同, 或都为 undefined 的时候就 直接结束。\n    if (!oldClass && !klass)\n        return;\n    if (oldClass === klass)\n        return;\n    oldClass = oldClass || {};\n    klass = klass || {};\n    // \n    for (name in oldClass) {\n        // 如果旧 dom 中的 class 中的 class 属性存在并且不等于 undefined时 \n        // 通过 Object.prototype.hasOwnProperty.call 判断新 dom 的class 属性中是否存在, 不存在就删除该 class 属性\n        if (oldClass[name] &&\n            !Object.prototype.hasOwnProperty.call(klass, name)) {\n            // was `true` and now not provided\n            // 删除 class\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        cur = klass[name];\n        if (cur !== oldClass[name]) {\n            elm.classList[cur ? 'add' : 'remove'](name);\n        }\n    }\n}\nexports.classModule = { create: updateClass, update: updateClass };\n"},"sourceMaps":{"js":{"version":3,"file":"class.js","sourceRoot":"","sources":["node_modules/snabbdom/src/package/modules/class.ts"],"names":[],"mappings":";;;AAMA,kBAAkB;AAElB,SAAS,WAAW,CAAE,QAAe,EAAE,KAAY;IACjD,IAAI,GAAQ,CAAA;IACZ,IAAI,IAAY,CAAA;IAChB,uBAAuB;IACvB,IAAI,GAAG,GAAY,KAAK,CAAC,GAAc,CAAA;IAEvC,oBAAoB;IACpB,IAAI,QAAQ,GAAI,QAAQ,CAAC,IAAkB,CAAC,KAAK,CAAA;IACjD,IAAI,KAAK,GAAI,KAAK,CAAC,IAAkB,CAAC,KAAK,CAAA;IAE3C,8CAA8C;IAC9C,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK;QAAE,OAAM;IAC/B,IAAI,QAAQ,KAAK,KAAK;QAAE,OAAM;IAE9B,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAA;IACzB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAA;IAEnB,GAAG;IACH,KAAK,IAAI,IAAI,QAAQ,EAAE;QACrB,kDAAkD;QAClD,mFAAmF;QACnF,IACE,QAAQ,CAAC,IAAI,CAAC;YACd,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAClD;YACA,kCAAkC;YAClC,WAAW;YACX,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;SAC3B;KACF;IACD,KAAK,IAAI,IAAI,KAAK,EAAE;QAClB,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAA;QACjB,IAAI,GAAG,KAAK,QAAQ,CAAC,IAAI,CAAC,EAAE;YACzB,GAAG,CAAC,SAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAA;SACrD;KACF;AACH,CAAC;AAEY,QAAA,WAAW,GAAW,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,CAAA","sourcesContent":["import { VNode, VNodeData } from '../vnode'\nimport { Module } from './module'\n\nexport type Classes = Record<string, boolean>\n\n\n// 用于切换 class 类样式的\n\nfunction updateClass (oldVnode: VNode, vnode: VNode): void {\n  var cur: any\n  var name: string\n  // 获取获取新的 DOM 节点元素,用于操作\n  var elm: Element = vnode.elm as Element\n\n  // 获取新旧 DOM 中的 class\n  var oldClass = (oldVnode.data as VNodeData).class\n  var klass = (vnode.data as VNodeData).class\n\n  // 新旧 DOM 的 class 相同, 或都为 undefined 的时候就 直接结束。\n  if (!oldClass && !klass) return\n  if (oldClass === klass) return\n\n  oldClass = oldClass || {}\n  klass = klass || {}\n\n  // \n  for (name in oldClass) {\n    // 如果旧 dom 中的 class 中的 class 属性存在并且不等于 undefined时 \n    // 通过 Object.prototype.hasOwnProperty.call 判断新 dom 的class 属性中是否存在, 不存在就删除该 class 属性\n    if (\n      oldClass[name] &&\n      !Object.prototype.hasOwnProperty.call(klass, name)\n    ) {\n      // was `true` and now not provided\n      // 删除 class\n      elm.classList.remove(name)\n    }\n  }\n  for (name in klass) {\n    cur = klass[name]\n    if (cur !== oldClass[name]) {\n      (elm.classList as any)[cur ? 'add' : 'remove'](name)\n    }\n  }\n}\n\nexport const classModule: Module = { create: updateClass, update: updateClass }\n"]}},"error":null,"hash":"616b02ddc6bf2102cb2a1155562a1aaf","cacheData":{"env":{}}}