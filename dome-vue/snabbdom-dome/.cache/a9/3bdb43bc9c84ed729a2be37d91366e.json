{"id":"node_modules/snabbdom/src/package/modules/attributes.ts","dependencies":[{"name":"/Users/yangyi/yangyi/dome-vue/snabbdom-dome/package.json","includedInParent":true,"mtime":1602344467201},{"name":"/Users/yangyi/yangyi/dome-vue/snabbdom-dome/node_modules/snabbdom/package.json","includedInParent":true,"mtime":1602351382044}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attributesModule = void 0;\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xmlNS = 'http://www.w3.org/XML/1998/namespace';\nvar colonChar = 58;\nvar xChar = 120;\n//  用于设置 DOM 元素的属性, 使用的是setAttribute() 方法\n// elm 是虚拟 DOM 的元素节点 sel 是虚拟 DOM \bHTML 标签类型和 class 及 id 的 name, sel 就是一个字符串, \n// elm 是 text 时, sel 值是 undenfined\n// text属性为 elm 元素的 文本内容\n// 更新节点的 Attribute(属性)\nfunction updateAttrs(oldVnode, vnode) {\n    var key;\n    // 获取新 DOM 的 elm 节点, #text 就是 undefined, 否则是一个元素\n    var elm = vnode.elm;\n    // 获取旧的  DOM 中的 Attribute(属性)\n    var oldAttrs = oldVnode.data.attrs;\n    // 获取新 DOM 中的 Attribute(属性)\n    var attrs = vnode.data.attrs;\n    // 旧 DOM 没有 Attribute (属性) 并且 新的 DOM 中没有 Attribute(属性) 就直接结束, 不更新\n    if (!oldAttrs && !attrs)\n        return;\n    // 旧 DOM 中的 Attribute (属性) 和 新的 DOM 的 Attribute(属性) 相同就直接结束, 不更新\n    if (oldAttrs === attrs)\n        return;\n    oldAttrs = oldAttrs || {};\n    attrs = attrs || {};\n    // 遍历新的 DOM 中的 Attribbute 属性与旧的 DOM 中的 Attribbute 属性进行对比\n    // update modified attributes, add new attributes\n    for (key in attrs) {\n        var cur = attrs[key];\n        var old = oldAttrs[key];\n        // 判断新旧元素中的属性是否相同, 不相同时,判断新 DOM 中的 attribute 属性的 value是否存在,存在就保存该属性, 不存在删除该属性\n        if (old !== cur) {\n            if (cur === true) {\n                elm.setAttribute(key, '');\n            }\n            else if (cur === false) {\n                elm.removeAttribute(key);\n            }\n            else {\n                if (key.charCodeAt(0) !== xChar) {\n                    elm.setAttribute(key, cur);\n                }\n                else if (key.charCodeAt(3) === colonChar) {\n                    // Assume xml namespace\n                    elm.setAttributeNS(xmlNS, key, cur);\n                }\n                else if (key.charCodeAt(5) === colonChar) {\n                    // Assume xlink namespace\n                    elm.setAttributeNS(xlinkNS, key, cur);\n                }\n                else {\n                    elm.setAttribute(key, cur);\n                }\n            }\n        }\n    }\n    // remove removed attributes\n    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)\n    // the other option is to remove all attributes with value == undefined\n    // 判断旧 dom 中的 属性是否存在新的 dom Attributes 中,不存在就删除属性 \n    for (key in oldAttrs) {\n        if (!(key in attrs)) {\n            elm.removeAttribute(key);\n        }\n    }\n}\nexports.attributesModule = { create: updateAttrs, update: updateAttrs };\n"},"sourceMaps":{"js":{"version":3,"file":"attributes.js","sourceRoot":"","sources":["node_modules/snabbdom/src/package/modules/attributes.ts"],"names":[],"mappings":";;;AAKA,IAAM,OAAO,GAAG,8BAA8B,CAAA;AAC9C,IAAM,KAAK,GAAG,sCAAsC,CAAA;AACpD,IAAM,SAAS,GAAG,EAAE,CAAA;AACpB,IAAM,KAAK,GAAG,GAAG,CAAA;AAEjB,yCAAyC;AAEzC,6EAA6E;AAC7E,kCAAkC;AAClC,uBAAuB;AAIvB,sBAAsB;AACtB,SAAS,WAAW,CAAE,QAAe,EAAE,KAAY;IACjD,IAAI,GAAW,CAAA;IACf,gDAAgD;IAChD,IAAI,GAAG,GAAY,KAAK,CAAC,GAAc,CAAA;IACvC,6BAA6B;IAC7B,IAAI,QAAQ,GAAI,QAAQ,CAAC,IAAkB,CAAC,KAAK,CAAA;IACjD,2BAA2B;IAC3B,IAAI,KAAK,GAAI,KAAK,CAAC,IAAkB,CAAC,KAAK,CAAA;IAE3C,iEAAiE;IACjE,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK;QAAE,OAAM;IAC/B,gEAAgE;IAChE,IAAI,QAAQ,KAAK,KAAK;QAAE,OAAM;IAG9B,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAA;IACzB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAA;IAGnB,wDAAwD;IACxD,iDAAiD;IACjD,KAAK,GAAG,IAAI,KAAK,EAAE;QACjB,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAA;QACtB,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAA;QACzB,6EAA6E;QAC7E,IAAI,GAAG,KAAK,GAAG,EAAE;YACf,IAAI,GAAG,KAAK,IAAI,EAAE;gBAChB,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;aAC1B;iBAAM,IAAI,GAAG,KAAK,KAAK,EAAE;gBACxB,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA;aACzB;iBAAM;gBACL,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;oBAC/B,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,GAAU,CAAC,CAAA;iBAClC;qBAAM,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;oBAC1C,uBAAuB;oBACvB,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE,GAAU,CAAC,CAAA;iBAC3C;qBAAM,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;oBAC1C,yBAAyB;oBACzB,GAAG,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,EAAE,GAAU,CAAC,CAAA;iBAC7C;qBAAM;oBACL,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,GAAU,CAAC,CAAA;iBAClC;aACF;SACF;KACF;IACD,4BAA4B;IAC5B,gHAAgH;IAChH,uEAAuE;IACvE,iDAAiD;IACjD,KAAK,GAAG,IAAI,QAAQ,EAAE;QACpB,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE;YACnB,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA;SACzB;KACF;AACH,CAAC;AAEY,QAAA,gBAAgB,GAAW,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE,CAAA","sourcesContent":["import { VNode, VNodeData } from '../vnode'\nimport { Module } from './module'\n\nexport type Attrs = Record<string, string | number | boolean>\n\nconst xlinkNS = 'http://www.w3.org/1999/xlink'\nconst xmlNS = 'http://www.w3.org/XML/1998/namespace'\nconst colonChar = 58\nconst xChar = 120\n\n//  用于设置 DOM 元素的属性, 使用的是setAttribute() 方法\n \n// elm 是虚拟 DOM 的元素节点 sel 是虚拟 DOM \bHTML 标签类型和 class 及 id 的 name, sel 就是一个字符串, \n// elm 是 text 时, sel 值是 undenfined\n// text属性为 elm 元素的 文本内容\n\n\n\n// 更新节点的 Attribute(属性)\nfunction updateAttrs (oldVnode: VNode, vnode: VNode): void {\n  var key: string\n  // 获取新 DOM 的 elm 节点, #text 就是 undefined, 否则是一个元素\n  var elm: Element = vnode.elm as Element\n  // 获取旧的  DOM 中的 Attribute(属性)\n  var oldAttrs = (oldVnode.data as VNodeData).attrs\n  // 获取新 DOM 中的 Attribute(属性)\n  var attrs = (vnode.data as VNodeData).attrs\n\n  // 旧 DOM 没有 Attribute (属性) 并且 新的 DOM 中没有 Attribute(属性) 就直接结束, 不更新\n  if (!oldAttrs && !attrs) return \n  // 旧 DOM 中的 Attribute (属性) 和 新的 DOM 的 Attribute(属性) 相同就直接结束, 不更新\n  if (oldAttrs === attrs) return\n\n\n  oldAttrs = oldAttrs || {}\n  attrs = attrs || {}\n\n\n  // 遍历新的 DOM 中的 Attribbute 属性与旧的 DOM 中的 Attribbute 属性进行对比\n  // update modified attributes, add new attributes\n  for (key in attrs) {\n    const cur = attrs[key]\n    const old = oldAttrs[key]\n    // 判断新旧元素中的属性是否相同, 不相同时,判断新 DOM 中的 attribute 属性的 value是否存在,存在就保存该属性, 不存在删除该属性\n    if (old !== cur) {\n      if (cur === true) {\n        elm.setAttribute(key, '')\n      } else if (cur === false) {\n        elm.removeAttribute(key)\n      } else {\n        if (key.charCodeAt(0) !== xChar) {\n          elm.setAttribute(key, cur as any)\n        } else if (key.charCodeAt(3) === colonChar) {\n          // Assume xml namespace\n          elm.setAttributeNS(xmlNS, key, cur as any)\n        } else if (key.charCodeAt(5) === colonChar) {\n          // Assume xlink namespace\n          elm.setAttributeNS(xlinkNS, key, cur as any)\n        } else {\n          elm.setAttribute(key, cur as any)\n        }\n      }\n    }\n  }\n  // remove removed attributes\n  // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)\n  // the other option is to remove all attributes with value == undefined\n  // 判断旧 dom 中的 属性是否存在新的 dom Attributes 中,不存在就删除属性 \n  for (key in oldAttrs) {\n    if (!(key in attrs)) {\n      elm.removeAttribute(key)\n    }\n  }\n}\n\nexport const attributesModule: Module = { create: updateAttrs, update: updateAttrs }\n"]}},"error":null,"hash":"0646dfcb4a2172f71f3b606ca2f65c80","cacheData":{"env":{}}}